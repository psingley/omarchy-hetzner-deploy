#!/bin/bash
# Automated Omarchy Desktop on Hetzner Cloud
# Single-command deployment: ./deploy.sh
# Author: Generated by Claude Code
# License: MIT

set -euo pipefail

# ============================================================================
# CONFIGURATION (Edit these or set via environment variables)
# ============================================================================
HCLOUD_TOKEN="${HCLOUD_TOKEN:-}"
SERVER_NAME="${SERVER_NAME:-omarchy-$(date +%s)}"
SERVER_TYPE="${SERVER_TYPE:-cpx31}"
SERVER_LOCATION="${SERVER_LOCATION:-ash}"
SSH_KEY_NAME="${SSH_KEY_NAME:-omarchy-ssh}"

# System credentials
LUKS_PASSWORD="${LUKS_PASSWORD:-omarchy123}"
ROOT_PASSWORD="${ROOT_PASSWORD:-omarchy123}"
USERNAME="${USERNAME:-omarchy}"
USER_PASSWORD="${USER_PASSWORD:-omarchy123}"
HOSTNAME="${HOSTNAME:-omarchy-server}"
TIMEZONE="${TIMEZONE:-America/New_York}"

# SSH public key (replace with yours)
SSH_PUBLIC_KEY="${SSH_PUBLIC_KEY:-ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIH1bjDzxyc170lm5KlvUAzfsrI3jSF0PzBgS7PmcR/ut omarchy@hetzner}"

# Feature flags
INSTALL_OMARCHY="${INSTALL_OMARCHY:-false}"  # Set to 'true' to install full Omarchy

# ============================================================================
# VALIDATION
# ============================================================================
if ! command -v hcloud &> /dev/null; then
    echo "❌ hcloud CLI not found. Install: https://github.com/hetznercloud/cli"
    exit 1
fi

if [ -z "$HCLOUD_TOKEN" ]; then
    echo "❌ HCLOUD_TOKEN not set. Get from: https://console.hetzner.cloud/"
    exit 1
fi

export HCLOUD_TOKEN

# ============================================================================
# PHASE 1: CREATE SERVER
# ============================================================================
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🚀 Phase 1: Creating Hetzner server"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

hcloud server create --name "$SERVER_NAME" --type "$SERVER_TYPE" \
  --image ubuntu-24.04 --ssh-key "$SSH_KEY_NAME" --location "$SERVER_LOCATION" > /dev/null

SERVER_IP=$(hcloud server ip "$SERVER_NAME")
echo "✅ Server created: $SERVER_IP"

hcloud server attach-iso "$SERVER_NAME" archlinux-2025.02.01-x86_64.iso > /dev/null
# CRITICAL GOTCHA: 'reboot' boots from disk, not ISO. Must use poweroff + poweron!
# Note: 'shutdown' is unreliable, 'poweroff' is more forceful and works consistently
hcloud server poweroff "$SERVER_NAME" > /dev/null
echo "⏳ Waiting for poweroff..."
sleep 15
hcloud server poweron "$SERVER_NAME" > /dev/null
ssh-keygen -R "$SERVER_IP" 2>/dev/null || true

echo "⏳ Waiting for Arch ISO to boot (60s)..."
sleep 60

# Configure SSH key for Arch ISO root access
echo "🔑 Configuring SSH access to Arch ISO..."

# First, test if SSH key already works (Hetzner pre-injects it if --ssh-key was used)
echo "Testing if SSH key authentication already works..."
if ssh -i ~/.ssh/omarchy_ed25519 -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o PasswordAuthentication=no root@"$SERVER_IP" 'echo ready' &>/dev/null 2>&1; then
    echo "✅ SSH key authentication working (pre-injected by Hetzner)"
else
    # Key doesn't work yet - need to inject it via password auth
    # Arch ISO allows password auth, so we'll inject our key via console
    echo "🔑 SSH key not working, attempting injection via password auth..."

    # Check if sshpass is available
    if ! command -v sshpass &> /dev/null; then
        echo "⚠️  sshpass not installed - SSH key must exist in Hetzner for Arch ISO access"
        echo "Install: brew install hudochenkov/sshpass/sshpass (macOS) or apt-get install sshpass (Linux)"
        echo ""
        PUBKEY=$(cat ~/.ssh/omarchy_ed25519.pub)
        echo "Alternative: Manually run on Arch ISO console:"
        echo "  mkdir -p /root/.ssh && echo '$PUBKEY' > /root/.ssh/authorized_keys"
        exit 1
    fi

    # Create a script to inject the key
    cat > /tmp/inject_key.sh << 'INJECT_EOF'
#!/bin/bash
mkdir -p /root/.ssh
chmod 700 /root/.ssh
cat > /root/.ssh/authorized_keys << 'KEY_EOF'
PUBKEY_PLACEHOLDER
KEY_EOF
chmod 600 /root/.ssh/authorized_keys
echo "Key injected successfully"
INJECT_EOF

    # Replace placeholder with actual public key
    PUBKEY=$(cat ~/.ssh/omarchy_ed25519.pub)
    sed -i '' "s|PUBKEY_PLACEHOLDER|$PUBKEY|" /tmp/inject_key.sh

    # Retry injection multiple times (ISO might still be booting)
    INJECTION_SUCCESS=false
    for attempt in {1..10}; do
        echo "Injection attempt $attempt/10..."

        # Try empty password first, then 'root' password
        if sshpass -p '' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@"$SERVER_IP" 'bash -s' < /tmp/inject_key.sh 2>/dev/null; then
            echo "✅ Key injected with empty password"
            INJECTION_SUCCESS=true
            break
        elif sshpass -p 'root' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@"$SERVER_IP" 'bash -s' < /tmp/inject_key.sh 2>/dev/null; then
            echo "✅ Key injected with 'root' password"
            INJECTION_SUCCESS=true
            break
        fi

        if [ $attempt -lt 10 ]; then
            echo "Injection failed, waiting 5s before retry..."
            sleep 5
        fi
    done

    rm /tmp/inject_key.sh

    if [ "$INJECTION_SUCCESS" = false ]; then
        echo "❌ Failed to inject key after 10 attempts"
        echo "This usually means:"
        echo "  1. Arch ISO hasn't booted properly"
        echo "  2. Password auth is disabled"
        echo "  3. Network issue"
        exit 1
    fi

    sleep 2

    # Verify the key works after injection
    echo "Verifying SSH key authentication..."
    for i in {1..10}; do
        if ssh -i ~/.ssh/omarchy_ed25519 -o ConnectTimeout=5 -o StrictHostKeyChecking=no root@"$SERVER_IP" 'echo ready' &>/dev/null; then
            echo "✅ SSH key authentication verified"
            break
        fi

        if [ $i -eq 10 ]; then
            echo "❌ SSH key authentication failed after injection"
            echo "Debug: Try manually: ssh -i ~/.ssh/omarchy_ed25519 root@$SERVER_IP"
            exit 1
        fi

        echo "Waiting for SSH (attempt $i/10)..."
        sleep 5
    done
fi

# Verify we actually booted from Arch ISO (not from installed disk)
echo "🔍 Verifying boot environment..."
BOOT_CHECK=$(ssh -i ~/.ssh/omarchy_ed25519 -o ConnectTimeout=5 -o StrictHostKeyChecking=no root@"$SERVER_IP" "mount | grep ' / ' | head -1" 2>/dev/null || echo "failed")
if [[ "$BOOT_CHECK" != *"airootfs"* ]] && [[ "$BOOT_CHECK" != *"overlay"* ]]; then
    echo "❌ ERROR: System did not boot from ISO (booted from disk instead)"
    echo "   Boot check result: $BOOT_CHECK"
    echo "   Expected: airootfs or overlay filesystem"
    echo ""
    echo "This usually means 'hcloud server reboot' booted from disk, not ISO."
    echo "Try: hcloud server shutdown $SERVER_NAME && hcloud server poweron $SERVER_NAME"
    exit 1
fi
echo "✅ Verified: Booted from Arch ISO ($BOOT_CHECK)"

# ============================================================================
# PHASE 2: INSTALL BASE ARCH LINUX
# ============================================================================
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "💾 Phase 2: Installing Arch Linux"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

ssh -i ~/.ssh/omarchy_ed25519 -o StrictHostKeyChecking=no root@"$SERVER_IP" bash <<INSTALL

set -euxo pipefail

# Partition with BIOS boot support
wipefs -a /dev/sda
parted --script /dev/sda mklabel gpt
parted --script /dev/sda mkpart primary 1MiB 2MiB
parted --script /dev/sda set 1 bios_grub on
parted --script /dev/sda mkpart ESP fat32 2MiB 514MiB
parted --script /dev/sda set 2 esp on
parted --script /dev/sda mkpart primary 514MiB 100%

# LUKS + btrfs
mkfs.fat -F32 /dev/sda2
echo -n "$LUKS_PASSWORD" | cryptsetup luksFormat --type luks2 /dev/sda3 -
echo -n "$LUKS_PASSWORD" | cryptsetup open /dev/sda3 cryptroot -
mkfs.btrfs -f -L arch /dev/mapper/cryptroot

# btrfs subvolumes
mount /dev/mapper/cryptroot /mnt
btrfs subvolume create /mnt/@{,home,var,tmp,snapshots}
umount /mnt

mount -o compress=zstd,subvol=@ /dev/mapper/cryptroot /mnt
mkdir -p /mnt/{boot,home,var,tmp,.snapshots}
mount -o compress=zstd,subvol=@home /dev/mapper/cryptroot /mnt/home
mount -o compress=zstd,subvol=@var /dev/mapper/cryptroot /mnt/var
mount -o compress=zstd,subvol=@tmp /dev/mapper/cryptroot /mnt/tmp
mount -o compress=zstd,subvol=@snapshots /dev/mapper/cryptroot /mnt/.snapshots
mount /dev/sda2 /mnt/boot

# Install base system
yes "" | pacstrap /mnt base linux linux-firmware btrfs-progs cryptsetup grub \
  sudo networkmanager openssh vim git base-devel || true
genfstab -U /mnt >> /mnt/etc/fstab

# Configure system
arch-chroot /mnt bash <<'CHROOT'
set -euxo pipefail

ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime
hwclock --systohc
echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf
echo "$HOSTNAME" > /etc/hostname
cat > /etc/hosts <<EOF
127.0.0.1   localhost
::1         localhost
127.0.1.1   $HOSTNAME.localdomain $HOSTNAME
EOF

echo "root:$ROOT_PASSWORD" | chpasswd
useradd -m -G wheel,audio,video,storage -s /bin/bash $USERNAME
echo "$USERNAME:$USER_PASSWORD" | chpasswd
echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel
systemctl enable NetworkManager sshd

# GRUB + LUKS keyfile
UUID=\$(blkid -s UUID -o value /dev/sda3)
grub-install --target=i386-pc /dev/sda
sed -i "s|^GRUB_CMDLINE_LINUX=\"\"|GRUB_CMDLINE_LINUX=\"cryptdevice=UUID=\$UUID:cryptroot root=/dev/mapper/cryptroot\"|" /etc/default/grub

dd if=/dev/urandom of=/crypto_keyfile.bin bs=512 count=4
chmod 000 /crypto_keyfile.bin
echo -n "$LUKS_PASSWORD" | cryptsetup luksAddKey /dev/sda3 /crypto_keyfile.bin -

sed -i 's|^FILES=()|FILES=(/crypto_keyfile.bin)|' /etc/mkinitcpio.conf
sed -i "s|cryptdevice=UUID=\$UUID:cryptroot|cryptdevice=UUID=\$UUID:cryptroot cryptkey=rootfs:/crypto_keyfile.bin|" /etc/default/grub
sed -i 's|^HOOKS=(.*)|HOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block encrypt filesystems fsck)|' /etc/mkinitcpio.conf

mkinitcpio -P
grub-mkconfig -o /boot/grub/grub.cfg

# SSH keys
mkdir -p /home/$USERNAME/.ssh /root/.ssh
chmod 700 /home/$USERNAME/.ssh /root/.ssh
echo "$SSH_PUBLIC_KEY" > /home/$USERNAME/.ssh/authorized_keys
chmod 600 /home/$USERNAME/.ssh/authorized_keys
chown -R $USERNAME:$USERNAME /home/$USERNAME/.ssh
cp /home/$USERNAME/.ssh/authorized_keys /root/.ssh/
chmod 600 /root/.ssh/authorized_keys
CHROOT

umount -R /mnt
cryptsetup close cryptroot
INSTALL

if [ $? -ne 0 ]; then
    echo "❌ ERROR: Arch installation failed"
    echo "Check logs above for details"
    exit 1
fi

# Verify installation
echo "🔍 Verifying installation..."
INSTALL_CHECK=$(ssh -i ~/.ssh/omarchy_ed25519 -o ConnectTimeout=5 -o StrictHostKeyChecking=no root@"$SERVER_IP" "ls /mnt 2>/dev/null || echo 'unmounted'" 2>/dev/null)
if [[ "$INSTALL_CHECK" != "unmounted" ]]; then
    echo "⚠️  WARNING: /mnt still shows files (may be normal if unmount in progress)"
fi

echo "✅ Base Arch installed"

# Reboot into installed system
hcloud server detach-iso "$SERVER_NAME" > /dev/null
hcloud server reboot "$SERVER_NAME" > /dev/null
ssh-keygen -R "$SERVER_IP" 2>/dev/null || true

echo "⏳ Waiting for system to boot (60s)..."
sleep 60

# Wait for SSH
for i in {1..10}; do
    if ssh -i ~/.ssh/omarchy_ed25519 -o ConnectTimeout=5 -o StrictHostKeyChecking=no $USERNAME@"$SERVER_IP" 'echo ready' &>/dev/null; then
        echo "✅ Booted into installed Arch"
        break
    fi
    sleep 5
done

# ============================================================================
# PHASE 3: INSTALL HYPRLAND + VNC
# ============================================================================
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🖥️  Phase 3: Installing Hyprland + VNC"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

ssh -i ~/.ssh/omarchy_ed25519 -o StrictHostKeyChecking=no $USERNAME@"$SERVER_IP" bash <<'HYPRLAND'
set -euxo pipefail

# Install yay
cd /tmp
git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si --noconfirm
cd && rm -rf /tmp/yay

# Install Hyprland from official repos
sudo pacman -Sy --noconfirm --needed hyprland waybar wayvnc kitty xdg-desktop-portal-hyprland

# Configure seatd and VKMS
sudo systemctl enable --now seatd
sudo usermod -aG seat $USER
sudo modprobe vkms
echo "vkms" | sudo tee /etc/modules-load.d/vkms.conf

# Create minimal Hyprland config (modular for compatibility with Omarchy)
mkdir -p ~/.config/hypr

# Main config
cat > ~/.config/hypr/hyprland.conf <<'EOF'
# Minimal Hyprland config for VNC access
# If Omarchy is installed, this will be replaced with a modular config
source = ~/.config/hypr/envs.conf
source = ~/.config/hypr/monitors.conf
source = ~/.config/hypr/autostart.conf

general {
    gaps_in = 5
    gaps_out = 10
    border_size = 2
    col.active_border = rgb(8aadf4)
    col.inactive_border = rgb(24273a)
}

decoration {
    rounding = 8
    blur { enabled = false }
}

bind = SUPER, Q, killactive
bind = SUPER, RETURN, exec, kitty
EOF

# VNC-specific environment variables
cat > ~/.config/hypr/envs.conf <<'EOF'
env = WLR_RENDERER_ALLOW_SOFTWARE,1
env = WLR_NO_HARDWARE_CURSORS,1
env = WLR_BACKENDS,headless
EOF

# Virtual monitor configuration
cat > ~/.config/hypr/monitors.conf <<'EOF'
monitor=Virtual-1,1920x1080@60,0x0,1
EOF

# Autostart applications
cat > ~/.config/hypr/autostart.conf <<'EOF'
exec-once=waybar &
exec-once=sleep 3 && wayvnc --output=Virtual-1 0.0.0.0 5900 &
EOF

# Minimal waybar config
mkdir -p ~/.config/waybar
cat > ~/.config/waybar/config <<'EOF'
{
    "layer": "top",
    "modules-left": ["hyprland/workspaces"],
    "modules-center": ["clock"],
    "modules-right": ["network", "cpu", "memory"],
    "clock": { "format": "{:%H:%M}" }
}
EOF

# Create startup script
cat > ~/start-desktop.sh <<'EOF'
#!/bin/bash
export WLR_RENDERER_ALLOW_SOFTWARE=1
export WLR_NO_HARDWARE_CURSORS=1
export WLR_BACKENDS=headless
sg seat -c "Hyprland > ~/hyprland.log 2>&1 &"
EOF
chmod +x ~/start-desktop.sh

# Start Hyprland
~/start-desktop.sh
HYPRLAND

echo "✅ Hyprland + VNC installed"

# ============================================================================
# PHASE 4 (OPTIONAL): INSTALL OMARCHY
# ============================================================================
if [ "$INSTALL_OMARCHY" = "true" ]; then
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "🎨 Phase 4: Installing Omarchy (958 packages)"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    ssh -i ~/.ssh/omarchy_ed25519 -o StrictHostKeyChecking=no $USERNAME@"$SERVER_IP" bash <<'OMARCHY'
set -euxo pipefail

# Clone Omarchy
git clone https://github.com/basecamp/omarchy.git ~/.local/share/omarchy
cp -r ~/.local/share/omarchy/config/* ~/.config/
cp -r ~/.local/share/omarchy/default/* ~/

# Theme setup
mkdir -p ~/.config/omarchy/current
ln -sf ~/.local/share/omarchy/themes/catppuccin ~/.config/omarchy/current/theme
ln -sf ~/.local/share/omarchy/themes/catppuccin/backgrounds/1-catppuccin.png ~/.config/omarchy/current/background

# User configs - Create empty files first
touch ~/.config/hypr/{input,bindings,envs,looknfeel}.conf

# CRITICAL: Configure for VNC headless operation
# These settings enable software rendering and virtual displays for remote access
cat > ~/.config/hypr/envs.conf <<'ENVEOF'
# VNC headless rendering setup (required for remote desktop without GPU)
env = WLR_RENDERER_ALLOW_SOFTWARE,1
env = WLR_NO_HARDWARE_CURSORS,1
env = WLR_BACKENDS,headless
env = GDK_SCALE,1
ENVEOF

cat > ~/.config/hypr/monitors.conf <<'MONEOF'
# VNC virtual monitor configuration
# Note: This overrides Omarchy's default monitor=,preferred,auto,auto setting
monitor=Virtual-1,1920x1080@60,0x0,1
MONEOF

cat > ~/.config/hypr/autostart.conf <<'AUTOEOF'
# Start WayVNC for remote access
# Waits 3s for Hyprland to initialize, then binds to Virtual-1 output
exec-once = sleep 3 && wayvnc --output=Virtual-1 0.0.0.0 5900
AUTOEOF

# Install packages (with rust/rustup workaround)
PACKAGES=$(cat ~/.local/share/omarchy/install/omarchy-base.packages | grep -v "^#" | grep -v "^cargo$" | tr "\n" " ")
(yes "n"; yes "2") | yay -S --needed --noconfirm \
  --answerdiff None --answerclean None --answeredit None \
  --mflags "--noconfirm" $PACKAGES || true

# Post-install
mkdir -p ~/.local/share/fonts
cp ~/.local/share/omarchy/config/omarchy.ttf ~/.local/share/fonts/
fc-cache -f

# GTK settings
mkdir -p ~/.config/gtk-{3,4}.0
cat > ~/.config/gtk-3.0/settings.ini <<'GTKEOF'
[Settings]
gtk-theme-name=Yaru
gtk-icon-theme-name=Yaru
gtk-font-name=Ubuntu 11
GTKEOF
cp ~/.config/gtk-3.0/settings.ini ~/.config/gtk-4.0/

# Keybinding
echo 'bindd = SUPER, SPACE, Omarchy menu, exec, ~/.local/share/omarchy/bin/omarchy-menu' >> ~/.config/hypr/hyprland.conf

# PATH
echo 'export PATH="$HOME/.local/share/omarchy/bin:$PATH"' >> ~/.bashrc
OMARCHY

    echo "✅ Omarchy installed"
fi

# ============================================================================
# PHASE 5: VNC VERIFICATION
# ============================================================================
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🔍 Phase 5: Verifying VNC Configuration"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

ssh -i ~/.ssh/omarchy_ed25519 -o StrictHostKeyChecking=no $USERNAME@"$SERVER_IP" bash <<'VERIFY'
set -euo pipefail

# Check if critical VNC configs exist and contain required settings
echo "Checking Hyprland VNC configuration..."

if ! grep -q "WLR_BACKENDS=headless" ~/.config/hypr/envs.conf 2>/dev/null; then
    echo "⚠️  WARNING: Missing WLR_BACKENDS=headless in envs.conf"
    echo "   VNC may show grey screen. Adding now..."
    cat >> ~/.config/hypr/envs.conf <<'ENVFIX'
env = WLR_RENDERER_ALLOW_SOFTWARE,1
env = WLR_NO_HARDWARE_CURSORS,1
env = WLR_BACKENDS,headless
ENVFIX
fi

if ! grep -q "Virtual-1" ~/.config/hypr/monitors.conf 2>/dev/null; then
    echo "⚠️  WARNING: Missing Virtual-1 monitor config"
    echo "   Adding now..."
    echo "monitor=Virtual-1,1920x1080@60,0x0,1" > ~/.config/hypr/monitors.conf
fi

if ! grep -q "wayvnc" ~/.config/hypr/autostart.conf 2>/dev/null; then
    echo "⚠️  WARNING: Missing WayVNC autostart"
    echo "   Adding now..."
    echo "exec-once = sleep 3 && wayvnc --output=Virtual-1 0.0.0.0 5900" >> ~/.config/hypr/autostart.conf
fi

# Check if processes are running
if pgrep -x "Hyprland" > /dev/null; then
    echo "✅ Hyprland is running"
else
    echo "⚠️  Hyprland not running - VNC won't work until started"
fi

if pgrep -x "wayvnc" > /dev/null; then
    echo "✅ WayVNC is running"
else
    echo "⚠️  WayVNC not running - VNC connections will fail"
fi

echo "VNC configuration verified"
VERIFY

echo "✅ VNC verification complete"

# ============================================================================
# COMPLETION
# ============================================================================
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ DEPLOYMENT COMPLETE"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Server: $SERVER_NAME"
echo "IP: $SERVER_IP"
echo "VNC: vnc://$SERVER_IP:5900"
echo "SSH: ssh $USERNAME@$SERVER_IP"
echo ""
echo "Credentials:"
echo "  User: $USERNAME"
echo "  Pass: $USER_PASSWORD"
echo ""
if [ "$INSTALL_OMARCHY" = "true" ]; then
    echo "Omarchy: Full installation (958 packages)"
else
    echo "Desktop: Minimal Hyprland + VNC"
    echo ""
    echo "To install full Omarchy later:"
    echo "  INSTALL_OMARCHY=true ./deploy.sh"
fi
echo ""
